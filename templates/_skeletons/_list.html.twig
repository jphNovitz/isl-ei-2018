{#####################################################}
{## @page template/_skeletons/_list.html.twig       ##}
{## - receive a list as an array                    ##}
{## - display all elements in a list                ##}
{## abstract -> can receive any object with         ##}
{##             slug and name properties            ##}
{## this list has to be extended                    ##}
{## part of laclementine project                    ##}
{## @author Novitz Jean-Philippe <novitz@gmail.com> ##}
{## 2018                                            ##}
{#####################################################}

{% extends '_bases/_admin_base.html.twig' %}

{% block body %}


    <h1> {% block title %}skeleton list {% endblock %} </h1>

    <div class="row">
        <div class="ui middle aligned divided fluid big list"
             id="object-list" data-list="{{ list|serialize }}"     >
            {% block list %}
                <div class="ui input focus sixteen wide field">
                    <input type="text"
                           placeholder="recherche rapide"
                           v-model="typing"
                    style="width: 100%"/>
                </div>

                    <div class="item" v-for="(object, key) in filtered">
                        <div class="middle aligned right floated">
                            {% block show %}
                                <a :href="'/'+path(key, '', '{{ entity }}')"
                                   class="ui blue circular tiny icon button">
                                    <i class="zoom icon"></i>
                                </a>
                                <template v-if="object.pdf">
                                    <a :href="path(key, 'pdf')"
                                       class="ui blue circular tiny icon basic button"
                                        title="pdf">
                                        <i class="file pdf icon"></i>
                                    </a>
                                </template>
                                <template v-else>
                                    <a href="#"
                                       class="ui blue circular tiny icon basic disabled button"
                                        title="pdf">
                                        <i class="file pdf icon"></i>
                                    </a>
                                </template>
                            {% endblock %}
                            {% block update %}
                                <a :href="'/'+path(key, 'update', '{{ entity }}')"
                                   class="ui olive circular tiny icon button">
                                    <i class="edit icon"></i>
                                </a>
                            {% endblock %}
                            {% block delete %}
                                <a :href="'/'+path(key, 'delete', '{{ entity }}')"
                                   class="ui red circular tiny icon button">
                                    <i class="delete icon"></i>
                                </a>
                            {% endblock %}
                        </div>
                        {#<img class="ui avatar image" src="/images/"~${object.images[0].imageName}~">#}
                        <div class="middle aligned content" style="line-height: 2rem">
                            {% block element_title %}  {#sometime it's title#}
                               <a :href="'/'+path(key, '', '{{ entity }}')">${ object.name }</a>
                            {% endblock %}
                        </div>
                    </div>
            {% endblock %}
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    <script>
    {{ parent() }}

    (function(){
    const vmlist = new Vue({
        el: '#object-list',
        delimiters : ['${', '}'],
        data: {
            typing: '',
            base_object: []
        },
        computed: {
            filtered() {
                let query = this.typing.replace(/\s/g,'').toLowerCase()
                return this.base_object.filter(o=>{
                    return (o.name.replace(/\s/g,'').toLowerCase().indexOf(query) > -1)
                })
            }
        },
        mounted() {
            let raw = this.$el.attributes['data-list'].value;
            this.base_object = JSON.parse(raw);

        },
        methods: {
            path: function (key,  action, entity='') {
                // if (entity!==''){
                //     entity+='/'
                // }
                let pre = 'admin/' + entity

                if (action === 'pdf'){
                    action = 'view'
                    pre = 'pdf'
                }
                let slug =  this.base_object[key].slug
                if (!slug){
                    slug =  this.base_object[key].username
                }

                let path = pre+'/'+slug+'/'+action
                console.log(pre)
                return (path)
            }
        }

    })

    })()
    </script>
{% endblock %}
    {% block right_column %}
        {% include '_elements/_action_floating_menu/_action_floating_menu.html.twig' %}
    {% endblock %}


